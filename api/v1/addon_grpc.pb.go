// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/addon.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AddonServiceClient is the client API for AddonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddonServiceClient interface {
	// List all Addons
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AddonListResponse, error)
	// Create new Addon
	Create(ctx context.Context, in *AddonCreateRequest, opts ...grpc.CallOption) (*AddonCreateResponse, error)
	// Read single Addon
	Read(ctx context.Context, in *AddonReadRequest, opts ...grpc.CallOption) (*AddonReadResponse, error)
	// Delete single Addon
	Delete(ctx context.Context, in *AddonDeleteRequest, opts ...grpc.CallOption) (*AddonDeleteResponse, error)
	// Update single Addon
	Update(ctx context.Context, in *AddonUpdateRequest, opts ...grpc.CallOption) (*AddonUpdateResponse, error)
}

type addonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddonServiceClient(cc grpc.ClientConnInterface) AddonServiceClient {
	return &addonServiceClient{cc}
}

func (c *addonServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AddonListResponse, error) {
	out := new(AddonListResponse)
	err := c.cc.Invoke(ctx, "/v1.AddonService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonServiceClient) Create(ctx context.Context, in *AddonCreateRequest, opts ...grpc.CallOption) (*AddonCreateResponse, error) {
	out := new(AddonCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.AddonService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonServiceClient) Read(ctx context.Context, in *AddonReadRequest, opts ...grpc.CallOption) (*AddonReadResponse, error) {
	out := new(AddonReadResponse)
	err := c.cc.Invoke(ctx, "/v1.AddonService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonServiceClient) Delete(ctx context.Context, in *AddonDeleteRequest, opts ...grpc.CallOption) (*AddonDeleteResponse, error) {
	out := new(AddonDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.AddonService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addonServiceClient) Update(ctx context.Context, in *AddonUpdateRequest, opts ...grpc.CallOption) (*AddonUpdateResponse, error) {
	out := new(AddonUpdateResponse)
	err := c.cc.Invoke(ctx, "/v1.AddonService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddonServiceServer is the server API for AddonService service.
// All implementations should embed UnimplementedAddonServiceServer
// for forward compatibility
type AddonServiceServer interface {
	// List all Addons
	List(context.Context, *emptypb.Empty) (*AddonListResponse, error)
	// Create new Addon
	Create(context.Context, *AddonCreateRequest) (*AddonCreateResponse, error)
	// Read single Addon
	Read(context.Context, *AddonReadRequest) (*AddonReadResponse, error)
	// Delete single Addon
	Delete(context.Context, *AddonDeleteRequest) (*AddonDeleteResponse, error)
	// Update single Addon
	Update(context.Context, *AddonUpdateRequest) (*AddonUpdateResponse, error)
}

// UnimplementedAddonServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAddonServiceServer struct {
}

func (UnimplementedAddonServiceServer) List(context.Context, *emptypb.Empty) (*AddonListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAddonServiceServer) Create(context.Context, *AddonCreateRequest) (*AddonCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAddonServiceServer) Read(context.Context, *AddonReadRequest) (*AddonReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedAddonServiceServer) Delete(context.Context, *AddonDeleteRequest) (*AddonDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAddonServiceServer) Update(context.Context, *AddonUpdateRequest) (*AddonUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

// UnsafeAddonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddonServiceServer will
// result in compilation errors.
type UnsafeAddonServiceServer interface {
	mustEmbedUnimplementedAddonServiceServer()
}

func RegisterAddonServiceServer(s grpc.ServiceRegistrar, srv AddonServiceServer) {
	s.RegisterService(&AddonService_ServiceDesc, srv)
}

func _AddonService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddonServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AddonService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddonServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddonService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddonCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddonServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AddonService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddonServiceServer).Create(ctx, req.(*AddonCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddonService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddonReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddonServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AddonService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddonServiceServer).Read(ctx, req.(*AddonReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddonService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddonDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddonServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AddonService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddonServiceServer).Delete(ctx, req.(*AddonDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddonService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddonUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddonServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AddonService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddonServiceServer).Update(ctx, req.(*AddonUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddonService_ServiceDesc is the grpc.ServiceDesc for AddonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AddonService",
	HandlerType: (*AddonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _AddonService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _AddonService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _AddonService_Read_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AddonService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AddonService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/addon.proto",
}
